Prerequisites
=============

Nec
---

The Nec product can be downloaded at http://www.si-list.net/swindex.html. The
project uses ``nec2c`` version 
( http://www.si-list.net/NEC_Archives/nec2c.tar.gz )



Python
------

In order to introduce the python language and to show how it fits well with the 
task we will generate the simulation input file ``input.h5``
in python ( http://www.python.org - at least the version 2.5.4 ). 

Two python modules must be present on the system :

* numpy : numpy is a module to handle multidimensional matrices (Ã  la Matlab)
  numpy 1.3 can be found out at http://sourceforge.net/projects/numpy/files.
* pytables : pytables permits to read/write HDF5 file in a very easy way.
  pytables 2.1.2 can be found out at http://www.pytables.org/download/stable/

Python module version must match with the version of the python interpreter.


Simulation file system (in the case of a Quercy simulation)
-----------------------------------------------------------

In the context of the Quercy platform, a simulation is a file hierarchy 
with a root : the simulation directory. Under
the root folder, we find out tree directories :

* ``inputDir``. ``inputDir`` contains input data generated by the platform. The
  main intput file is ``input.h5`` (the main file is the file that must be
  read first).
* ``workingDir``. ``workingDir`` contains data generated by :

  * the ``pre`` converter : The ``pre`` converter read input data generated 
    by the platform and creates information needed by the integrated module
    in its native format.
  * the module : the module read data generated but the ``pre`` converter and
    performs the computation as if it was not in the platform's context.
    Naturally, it writes native module output.
  
* ``outputDir``. ``outputDir`` contains data generated by the converter 
  ``post``. ``post`` read data coming from the module run and generate
  output data in Amelet-HDF format. The first file must be ``output.h5`` which
  reference all of secondary files.
  
At the end of the simulation, the file system looks like :

::

    /the/simulation/path
    |-- inputDir
    |   `-- input.h5
    |-- workingDir
    |   |-- input.nec
    |   `-- nec.out
    `-- outputDir
        |-- near_field.h5
        `-- output.h5

.. note::

    In this practice, we don't deal with the platform side of the integration.
    The work start with what happens in the simulation directory.

